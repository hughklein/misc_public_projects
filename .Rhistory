area <- bind_rows(area)
View(crosses)
i="f0b58e23-903e-4db8-ab7a-03d4831e3e69"
input <- crosses %>% filter(id==i) %>%
mutate(loc.x = ff_location.x,
loc.y = ff_location.y,
ff_location.x = ifelse(ff_location.x<102, 102, ff_location.x),
ff_location.y = ifelse(ff_location.y>62, 62, ff_location.y),
ff_location.y = ifelse(ff_location.y<18, 18, ff_location.y))
area <- deldir::deldir(input$ff_location.x, input$ff_location.y, rw=c(102,120,18,62))
area <- area$summary %>%
select(ff_location.x = x, ff_location.y = y, dir.area) %>%
left_join(input, by=c('ff_location.x', 'ff_location.y')) %>%
mutate(team_area = ifelse(teammate=="TRUE" & actor=="FALSE", dir.area, 0),
opp_area = ifelse(teammate=="FALSE" & actor=="FALSE", dir.area, 0)) %>%
group_by(id) %>%
summarize(team_area=sum(team_area),
opp_area=sum(opp_area))
actor <- input %>%
filter(actor==TRUE)
actor_loc.x <- actor$loc.x
actor_loc.y <- actor$loc.y
dist <- input %>%
filter(teammate==FALSE) %>%
select(loc.x, loc.y, teammate, actor) %>%
mutate(actor.x = actor_loc.x,
actor.y = actor_loc.y,
distance = (((actor.x-loc.x)^2) + ((actor.y-loc.y)^2))^0.5,
in_path = case_when(actor.y>40 & actor.y>=loc.y & actor.x<=loc.x ~ 1,
actor.y<40 & actor.y<=loc.y & actor.x<=loc.x ~ 1,
TRUE ~ 0))
View(dist)
dist_1_inpath <- dist %>%
filter(in_path==1)
View(dist_1_inpath)
dist_1_inpath <- dist %>%
filter(in_path==1) %>%
arrange(distance)
dist_1_inpath <- dist %>%
filter(in_path==1) %>%
arrange(distance) %>%
slice(1) %>%
pull(distance)
dist_1_inpath <- ifelse(is.empty(dist_1_inpath), 0, dist_1_inpath)
dist_1_inpath <- ifelse(is_empty(dist_1_inpath), 0, dist_1_inpath)
crosses = ffs %>%
#  filter(pass.end_location.x>102 & pass.end_location.y>18 & pass.end_location.y<62) %>%
filter(is.na(pass.type.name) | pass.type.name=="Recovery" | pass.type.name=="Interception")%>%
filter(pass.cross==TRUE) %>%
filter(keeper==FALSE) %>%
mutate(pass.start_location.x=location.x,
pass.start_location.y=location.y)
area_fx <- function(i){
input <- crosses %>% filter(id==i) %>%
mutate(loc.x = ff_location.x,
loc.y = ff_location.y,
ff_location.x = ifelse(ff_location.x<102, 102, ff_location.x),
ff_location.y = ifelse(ff_location.y>62, 62, ff_location.y),
ff_location.y = ifelse(ff_location.y<18, 18, ff_location.y))
area <- deldir::deldir(input$ff_location.x, input$ff_location.y, rw=c(102,120,18,62))
area <- area$summary %>%
select(ff_location.x = x, ff_location.y = y, dir.area) %>%
left_join(input, by=c('ff_location.x', 'ff_location.y')) %>%
mutate(team_area = ifelse(teammate=="TRUE" & actor=="FALSE", dir.area, 0),
opp_area = ifelse(teammate=="FALSE" & actor=="FALSE", dir.area, 0)) %>%
group_by(id) %>%
summarize(team_area=sum(team_area),
opp_area=sum(opp_area))
actor <- input %>%
filter(actor==TRUE)
actor_loc.x <- actor$loc.x
actor_loc.y <- actor$loc.y
dist <- input %>%
filter(teammate==FALSE) %>%
select(loc.x, loc.y, teammate, actor) %>%
mutate(actor.x = actor_loc.x,
actor.y = actor_loc.y,
distance = (((actor.x-loc.x)^2) + ((actor.y-loc.y)^2))^0.5,
in_path = case_when(actor.y>40 & actor.y>=loc.y & actor.x<=loc.x ~ 1,
actor.y<40 & actor.y<=loc.y & actor.x<=loc.x ~ 1,
TRUE ~ 0))
dist_1 <- dist %>%
arrange(distance) %>%
slice(1) %>%
pull(distance)
dist_2 <- dist %>%
arrange(distance) %>%
slice(2) %>%
pull(distance)
dist_1_inpath <- dist %>%
filter(in_path==1) %>%
arrange(distance) %>%
slice(1) %>%
pull(distance)
dist_1_inpath <- ifelse(is_empty(dist_1_inpath), 0, dist_1_inpath)
area %>%
mutate(dist_1 = dist_1,
dist_2 = dist_2,
dist_1_inpath = dist_1_inpath)
}
area <- map(unique(crosses$id), area_fx)
area <- bind_rows(area)
View(area)
crosses <- crosses %>%
group_by(team.name, OpposingTeam, id) %>%
summarise(player.name, pass.start_location.x, pass.start_location.y,
attackers = sum(teammate==TRUE & ff_location.x>102 & ff_location.y>18 & ff_location.y<62, na.rm = TRUE),
defenders = sum(teammate==FALSE & ff_location.x>102 & ff_location.y>18 & ff_location.y<62, na.rm = TRUE),
att_n_def = attackers+defenders,
att_v_def = attackers-defenders,
shot_assists = ifelse(is.na(pass.shot_assist), 0, 1)) %>%
ungroup() %>%
distinct() %>%
left_join(area, by="id") %>%
mutate(area_delta = team_area-opp_area,
goal_dist = (((pass.start_location.x - 120)^2) + ((pass.start_location.y - 40)^2))^0.5,
goal_angle = atan2(abs(pass.start_location.x-120), abs(pass.start_location.y-40)),
dist_1_inpath = ifelse(dist_1_inpath==0, goal_dist, dist_1_inpath))
View(crosses)
team <- crosses %>%
group_by(team.name) %>%
summarize(avg_att = mean(attackers),
avg_def = mean(defenders),
avg_total = mean(att_n_def),
avg_mismatch = mean(att_v_def),
avg_area_delta = mean(area_delta),
avg_team_area = mean(team_area),
avg_opp_area = mean(opp_area),
total = n(),
shot_assists_per = mean(shot_assists)) %>%
left_join(events %>% select(team.name, match_id) %>%
group_by(team.name) %>%
summarize(matches = n_distinct(match_id)),
by='team.name') %>%
mutate(cross_per_match = total/matches)
library(tidymodels)
crosses_mod <- crosses %>%
mutate(shot_assists = as.factor(shot_assists)) %>%
select(-c(player.name, team.name, OpposingTeam, pass.start_location.x, pass.start_location.y))
View(crosses_mod)
set.seed(555)
data_split <- initial_split(crosses_mod, prop = 4/5, strata=shot_assists)
train_data <- training(data_split)
test_data  <- testing(data_split)
cross_rec <-
recipe(shot_assists ~ ., data=train_data) %>%
update_role(id, new_role="ID")
step_dummy(all_nominal(), -all_outcomes())
lr_mod <-
logistic_reg() %>%
set_engine("glm")
cross_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(cross_rec)
cross_fit <-
cross_wflow %>%
fit(data = train_data)
coefs <- cross_fit %>%
pull_workflow_fit() %>%
tidy()
cross_pred <- bind_rows(
predict(cross_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(shot_assists, id))
#  predict(cross_fit, train_data, type = "prob") %>%
#  bind_cols(train_data %>% select(shot_assists, id))
)
cross_pred %>%
roc_auc(truth=shot_assists, .pred_1)
crosses_mod <- crosses %>%
mutate(shot_assists = as.factor(shot_assists)) %>%
select(-c(player.name, team.name, OpposingTeam, pass.start_location.x, pass.start_location.y))
set.seed(555)
data_split <- initial_split(crosses_mod, prop = 4/5, strata=shot_assists)
train_data <- training(data_split)
test_data  <- testing(data_split)
crosses_mod <- crosses %>%
mutate(shot_assists = as.factor(shot_assists)) %>%
select(-c(player.name, team.name, OpposingTeam, pass.start_location.x, pass.start_location.y))
set.seed(555)
data_split <- initial_split(crosses_mod, prop = 3/4, strata=shot_assists)
train_data <- training(data_split)
test_data  <- testing(data_split)
cross_rec <-
recipe(shot_assists ~ ., data=train_data) %>%
update_role(id, new_role="ID") %>%
step_dummy(all_nominal(), -all_outcomes())
lr_mod <-
logistic_reg() %>%
set_engine("glm")
cross_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(cross_rec)
cross_fit <-
cross_wflow %>%
fit(data = train_data)
coefs <- cross_fit %>%
pull_workflow_fit() %>%
tidy()
cross_pred <- bind_rows(
predict(cross_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(shot_assists, id))
#  predict(cross_fit, train_data, type = "prob") %>%
#  bind_cols(train_data %>% select(shot_assists, id))
)
cross_pred %>%
roc_auc(truth=shot_assists, .pred_1)
cross_rec <-
recipe(shot_assists ~ ., data=train_data) %>%
update_role(id, new_role="ID")
lr_mod <-
logistic_reg() %>%
set_engine("glm")
cross_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(cross_rec)
cross_fit <-
cross_wflow %>%
fit(data = train_data)
coefs <- cross_fit %>%
pull_workflow_fit() %>%
tidy()
cross_pred <- bind_rows(
predict(cross_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(shot_assists, id))
#  predict(cross_fit, train_data, type = "prob") %>%
#  bind_cols(train_data %>% select(shot_assists, id))
)
cross_pred %>%
roc_auc(truth=shot_assists, .pred_1)
View(coefs)
crosses_mod <- crosses %>%
mutate(shot_assists = as.factor(shot_assists)) %>%
select(-c(player.name, team.name, OpposingTeam, pass.start_location.x, pass.start_location.y,
dist_1, dist_2))
set.seed(555)
data_split <- initial_split(crosses_mod, prop = 3/4, strata=shot_assists)
train_data <- training(data_split)
test_data  <- testing(data_split)
cross_rec <-
recipe(shot_assists ~ ., data=train_data) %>%
update_role(id, new_role="ID")
lr_mod <-
logistic_reg() %>%
set_engine("glm")
cross_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(cross_rec)
cross_fit <-
cross_wflow %>%
fit(data = train_data)
coefs <- cross_fit %>%
pull_workflow_fit() %>%
tidy()
cross_pred <- bind_rows(
predict(cross_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(shot_assists, id))
#  predict(cross_fit, train_data, type = "prob") %>%
#  bind_cols(train_data %>% select(shot_assists, id))
)
cross_pred %>%
roc_auc(truth=shot_assists, .pred_1)
View(coefs)
crosses_mod <- crosses %>%
mutate(shot_assists = as.factor(shot_assists)) %>%
select(-c(player.name, team.name, OpposingTeam, pass.start_location.x, pass.start_location.y))
set.seed(123)
data_split <- initial_split(crosses_mod, prop = 4/5, strata=shot_assists)
train_data <- training(data_split)
test_data  <- testing(data_split)
cross_rec <-
recipe(shot_assists ~ ., data=train_data) %>%
update_role(id, new_role="ID")
lr_mod <-
logistic_reg() %>%
set_engine("glm")
cross_wflow <-
workflow() %>%
add_model(lr_mod) %>%
add_recipe(cross_rec)
cross_fit <-
cross_wflow %>%
fit(data = train_data)
coefs <- cross_fit %>%
pull_workflow_fit() %>%
tidy()
cross_pred <- bind_rows(
predict(cross_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(shot_assists, id))
#  predict(cross_fit, train_data, type = "prob") %>%
#  bind_cols(train_data %>% select(shot_assists, id))
)
cross_pred %>%
roc_auc(truth=shot_assists, .pred_1)
View(coefs)
View(cross_pred)
crosses_mod <- crosses %>%
mutate(shot_assists = as.factor(shot_assists)) %>%
select(-c(player.name, team.name, OpposingTeam, pass.start_location.x, pass.start_location.y))
set.seed(123)
data_split <- initial_split(crosses_mod, prop = 4/5, strata=shot_assists)
train_data <- training(data_split)
test_data  <- testing(data_split)
set.seed(123)
val_set <- validation_split(train_data,
strata = shot_assists,
prop = 0.80)
cross_rec <-
recipe(shot_assists ~ ., data=train_data) %>%
update_role(id, new_role="ID")
net_mod <-
logistic_reg(penalty = tune(), mixture = 1) %>%
set_engine("glmnet")
net_workflow <-
workflow() %>%
add_model(net_mod) %>%
add_recipe(cross_rec)
net_reg_grid <- tibble(penalty = 10^seq(-4, -1, length.out = 30))
net_res <-
lr_workflow %>%
tune_grid(val_set,
grid = net_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
net_res <-
net_workflow %>%
tune_grid(val_set,
grid = net_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
net_reg_grid <- tibble(penalty = 10^seq(-4, -1, length.out = 2))
net_res <-
net_workflow %>%
tune_grid(val_set,
grid = net_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
unregister_dopar()
net_res <-
net_workflow %>%
tune_grid(val_set,
grid = net_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
net_reg_grid <- tibble(penalty = 10^seq(-4, -1, length.out = 30))
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
unregister_dopar()
net_res <-
net_workflow %>%
tune_grid(val_set,
grid = net_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
net_plot <-
net_res %>%
collect_metrics() %>%
ggplot(aes(x = penalty, y = mean)) +
geom_point() +
geom_line() +
ylab("Area under the ROC Curve") +
scale_x_log10(labels = scales::label_number())
net_plot
top_models <-
net_res %>%
show_best("roc_auc", n = 15) %>%
arrange(penalty)
top_models
net_best <-
net_res %>%
collect_metrics() %>%
arrange(penalty) %>%
slice(12)
View(net_best)
net_best <-
net_res %>%
collect_metrics() %>%
arrange(penalty) %>%
slice(1)
View(net_best)
net_best <-
net_res %>%
collect_metrics() %>%
arrange(mean)
View(net_best)
net_best <-
net_res %>%
collect_metrics() %>%
arrange(desc(mean)) %>%
slice(1)
View(net_best)
net_best
net_auc <-
net_res %>%
collect_predictions(parameters = net_best)
View(net_auc)
net_best <-
net_res %>%
collect_metrics() %>%
arrange(desc(mean)) %>%
slice(5)
net_best
<-
net_res %>%
collect_predictions(parameters = net_best)
net_auc <-
net_res %>%
collect_predictions(parameters = net_best)
View(net_auc)
View(net_res)
View(net_best)
net_mod <-
logistic_reg(penalty = net_best %>% pull(penalty), mixture = 1) %>%
set_engine("glmnet")
net_wflow <-
workflow() %>%
add_model(net_mod) %>%
add_recipe(cross_rec)
net_fit <-
net_wflow %>%
fit(data = train_data)
coefs <- net_fit %>%
pull_workflow_fit() %>%
tidy()
View(coefs)
net_mod <-
logistic_reg(penalty = tune(), mixture = 0) %>%
set_engine("glmnet")
net_workflow <-
workflow() %>%
add_model(net_mod) %>%
add_recipe(cross_rec)
net_reg_grid <- tibble(penalty = 10^seq(-4, -1, length.out = 30))
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
unregister_dopar()
net_res <-
net_workflow %>%
tune_grid(val_set,
grid = net_reg_grid,
control = control_grid(save_pred = TRUE),
metrics = metric_set(roc_auc))
net_plot <-
net_res %>%
collect_metrics() %>%
ggplot(aes(x = penalty, y = mean)) +
geom_point() +
geom_line() +
ylab("Area under the ROC Curve") +
scale_x_log10(labels = scales::label_number())
net_plot
top_models <-
net_res %>%
show_best("roc_auc", n = 15) %>%
arrange(penalty)
top_models
net_best <-
net_res %>%
collect_metrics() %>%
arrange(desc(mean)) %>%
slice(2)
View(net_best)
net_mod <-
logistic_reg(penalty = net_best %>% pull(penalty), mixture = 1) %>%
set_engine("glmnet")
net_wflow <-
workflow() %>%
add_model(net_mod) %>%
add_recipe(cross_rec)
net_fit <-
net_wflow %>%
fit(data = train_data)
coefs <- net_fit %>%
pull_workflow_fit() %>%
tidy()
View(coefs)
net_pred <- bind_rows(
predict(net_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(shot_assists, id))
#  predict(cross_fit, train_data, type = "prob") %>%
#  bind_cols(train_data %>% select(shot_assists, id))
)
net_pred %>%
roc_auc(truth=shot_assists, .pred_1)
View(net_pred)
View(coefs)
View(coefs)
net_pred <- bind_rows(
predict(net_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(shot_assists, id, attackers, defenders, att_v_def, opp_area, team_area, dist_1_inpath, goal_dist))
#  predict(cross_fit, train_data, type = "prob") %>%
#  bind_cols(train_data %>% select(shot_assists, id))
)
View(net_pred)
pred <- bind_rows(
predict(net_fit, test_data, type = "prob") %>%
bind_cols(test_data %>% select(shot_assists, id, attackers, defenders, att_v_def, opp_area, team_area, dist_1_inpath, goal_dist)),
predict(cross_fit, train_data, type = "prob") %>%
bind_cols(train_data %>% select(shot_assists, id, attackers, defenders, att_v_def, opp_area, team_area, dist_1_inpath, goal_dist))
)
View(pred)
