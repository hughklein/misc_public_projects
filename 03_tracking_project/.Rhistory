annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(aes(x = ff_location.x, y = ff_location.y, fill=`Player Type`),
size = 6, alpha = 0.8, shape=21) +
labs(title = "Bad Defending", subtitle = "Based on Expected Threat Controlled by Defenders and Pre-Shot Attacker w/Ball xG", caption = "Note:\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data)\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).\n- Attacker w/ Ball expected goals is calculated as the hypothetical pre-shot xG based off of the attacker w/ ball location, regardless of whether or not the player shot the ball.") +
annotate(geom="label",x=90, y=40, label=paste0("xT Controlled by Attackers = ", bad_def %>% pull(att_pct),"%"),fontface='bold', size = 6, family="Roboto",
label.padding = unit(0.4, "lines")) +
geom_segment(
aes(x=x1, y=y1, xend=x2, yend=y2),
size=0.75, alpha=0.3,
data=voronoi$dirsgs,
linetype=2,
color= "black") +
coord_flip(xlim = c(85, 125)) +
theme(axis.text.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
plot.subtitle = element_text(size = 18, family="Roboto", hjust = 0.5),
axis.text.y=element_blank(),
legend.position = "top",
legend.title=element_blank(),
legend.text=element_text(size=14,family="Roboto"),
legend.margin = margin(c(20, 10, -65, 50)),
legend.key.size = unit(1.5, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 24, family="Roboto", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks=element_blank(),
aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"),
strip.text.x = element_text(size=13,family="Roboto"))
bad_def_plot
bad_def <- reg_predict %>%
filter(xg_per<0.06) %>%
arrange(desc(xt_per)) %>%
ungroup() %>%
slice_head(n=50) %>%
slice_sample(n=1) %>%
mutate(att_pct = round(100*(xt_per/(xt_per + def_xt_per)), 0))
bad_def_plot <-
area_input %>%
#xt_applied %>%
#  filter(original_event_id == bad_def %>% pull(original_event_id)) %>%
inner_join(bad_def %>% select(original_event_id), by='original_event_id') %>%
mutate(`Player Type` = case_when(
actor==TRUE ~ "Attacker w/ Ball",
keeper==TRUE ~ "Keeper",
teammate==TRUE ~ "Attacker",
teammate==FALSE ~ "Defender"
))
voronoi <- deldir::deldir(bad_def_plot$ff_location.x, bad_def_plot$ff_location.y, rw=c(80,120,0,80))
bad_def_plot <- bad_def_plot %>%
ggplot() +
annotate("rect",xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "black", size = 0.6)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6)+
theme(rect = element_blank(),
line = element_blank()) +
annotate("point", x = 108 , y = 40, colour = "black", size = 1.05) +
annotate("path", colour = "black", size = 0.6,
x=60+10*cos(seq(0,2*pi,length.out=2000)),
y=40+10*sin(seq(0,2*pi,length.out=2000)))+
annotate("point", x = 60 , y = 40, colour = "black", size = 1.05) +
annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(aes(x = ff_location.x, y = ff_location.y, fill=`Player Type`),
size = 6, alpha = 0.8, shape=21) +
labs(title = "Bad Defending", subtitle = "Based on Expected Threat Controlled by Defenders and Pre-Shot Attacker w/Ball xG", caption = "Note:\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data)\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).\n- Attacker w/ Ball expected goals is calculated as the hypothetical pre-shot xG based off of the attacker w/ ball location, regardless of whether or not the player shot the ball.") +
annotate(geom="label",x=90, y=40, label=paste0("xT Controlled by Attackers = ", bad_def %>% pull(att_pct),"%"),fontface='bold', size = 6, family="Roboto",
label.padding = unit(0.4, "lines")) +
geom_segment(
aes(x=x1, y=y1, xend=x2, yend=y2),
size=0.75, alpha=0.3,
data=voronoi$dirsgs,
linetype=2,
color= "black") +
coord_flip(xlim = c(85, 125)) +
theme(axis.text.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
plot.subtitle = element_text(size = 18, family="Roboto", hjust = 0.5),
axis.text.y=element_blank(),
legend.position = "top",
legend.title=element_blank(),
legend.text=element_text(size=14,family="Roboto"),
legend.margin = margin(c(20, 10, -65, 50)),
legend.key.size = unit(1.5, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 24, family="Roboto", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks=element_blank(),
aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"),
strip.text.x = element_text(size=13,family="Roboto"))
bad_def_plot
bad_def <- reg_predict %>%
filter(xg_per<0.06) %>%
arrange(desc(xt_per)) %>%
ungroup() %>%
slice_head(n=50) %>%
slice_sample(n=1) %>%
mutate(att_pct = round(100*(xt_per/(xt_per + def_xt_per)), 0))
bad_def_plot <-
area_input %>%
#xt_applied %>%
#  filter(original_event_id == bad_def %>% pull(original_event_id)) %>%
inner_join(bad_def %>% select(original_event_id), by='original_event_id') %>%
mutate(`Player Type` = case_when(
actor==TRUE ~ "Attacker w/ Ball",
keeper==TRUE ~ "Keeper",
teammate==TRUE ~ "Attacker",
teammate==FALSE ~ "Defender"
))
voronoi <- deldir::deldir(bad_def_plot$ff_location.x, bad_def_plot$ff_location.y, rw=c(80,120,0,80))
bad_def_plot <- bad_def_plot %>%
ggplot() +
annotate("rect",xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "black", size = 0.6)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6)+
theme(rect = element_blank(),
line = element_blank()) +
annotate("point", x = 108 , y = 40, colour = "black", size = 1.05) +
annotate("path", colour = "black", size = 0.6,
x=60+10*cos(seq(0,2*pi,length.out=2000)),
y=40+10*sin(seq(0,2*pi,length.out=2000)))+
annotate("point", x = 60 , y = 40, colour = "black", size = 1.05) +
annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(aes(x = ff_location.x, y = ff_location.y, fill=`Player Type`),
size = 6, alpha = 0.8, shape=21) +
labs(title = "Bad Defending", subtitle = "Based on Expected Threat Controlled by Defenders and Pre-Shot Attacker w/Ball xG", caption = "Note:\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data)\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).\n- Attacker w/ Ball expected goals is calculated as the hypothetical pre-shot xG based off of the attacker w/ ball location, regardless of whether or not the player shot the ball.") +
annotate(geom="label",x=90, y=40, label=paste0("xT Controlled by Attackers = ", bad_def %>% pull(att_pct),"%"),fontface='bold', size = 6, family="Roboto",
label.padding = unit(0.4, "lines")) +
geom_segment(
aes(x=x1, y=y1, xend=x2, yend=y2),
size=0.75, alpha=0.3,
data=voronoi$dirsgs,
linetype=2,
color= "black") +
coord_flip(xlim = c(85, 125)) +
theme(axis.text.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
plot.subtitle = element_text(size = 18, family="Roboto", hjust = 0.5),
axis.text.y=element_blank(),
legend.position = "top",
legend.title=element_blank(),
legend.text=element_text(size=14,family="Roboto"),
legend.margin = margin(c(20, 10, -65, 50)),
legend.key.size = unit(1.5, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 24, family="Roboto", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks=element_blank(),
aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"),
strip.text.x = element_text(size=13,family="Roboto"))
bad_def_plot
base_size <- 8.5
asp <- 1.5
ggsave(
filename = 'bad_def.png',
plot = bad_def_plot,
height = base_size,
width = base_size * asp
)
good_def <- reg_predict %>%
filter(xg_per<0.06) %>%
arrange(xt_per) %>%
ungroup() %>%
slice_head(n=50) %>%
slice_sample(n=1) %>%
mutate(att_pct = round(100*(xt_per/(xt_per + def_xt_per)), 0))
good_def_plot <-
area_input %>%
#xt_applied %>%
#  filter(original_event_id == bad_def %>% pull(original_event_id)) %>%
inner_join(good_def %>% select(original_event_id), by='original_event_id') %>%
mutate(`Player Type` = case_when(
actor==TRUE ~ "Attacker w/ Ball",
keeper==TRUE ~ "Keeper",
teammate==TRUE ~ "Attacker",
teammate==FALSE ~ "Defender"
))
voronoi <- deldir::deldir(good_def_plot$ff_location.x, good_def_plot$ff_location.y, rw=c(80,120,0,80))
good_def_plot <- good_def_plot %>%
ggplot() +
annotate("rect",xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "black", size = 0.6)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6)+
theme(rect = element_blank(),
line = element_blank()) +
annotate("point", x = 108 , y = 40, colour = "black", size = 1.05) +
annotate("path", colour = "black", size = 0.6,
x=60+10*cos(seq(0,2*pi,length.out=2000)),
y=40+10*sin(seq(0,2*pi,length.out=2000)))+
annotate("point", x = 60 , y = 40, colour = "black", size = 1.05) +
annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(aes(x = ff_location.x, y = ff_location.y, fill=`Player Type`),
size = 6, alpha = 0.8, shape=21) +
labs(title = "Good Defending", subtitle = "Based on Expected Threat Controlled by Defenders and Pre-Shot Attacker w/Ball xG", caption = "Note:\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data)\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).\n- Attacker w/ Ball expected goals is calculated as the hypothetical pre-shot xG based off of the attacker w/ ball location, regardless of whether or not the player shot the ball.") +
annotate(geom="label",x=90, y=40, label=paste0("xT Controlled by Attackers = ", good_def %>% pull(att_pct),"%"),fontface='bold', size = 6, family="Roboto",
label.padding = unit(0.4, "lines")) +
geom_segment(
aes(x=x1, y=y1, xend=x2, yend=y2),
size=0.75, alpha=0.3,
data=voronoi$dirsgs,
linetype=2,
color= "black") +
coord_flip(xlim = c(85, 125)) +
theme(axis.text.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
plot.subtitle = element_text(size = 18, family="Roboto", hjust = 0.5),
axis.text.y=element_blank(),
legend.position = "top",
legend.title=element_blank(),
legend.text=element_text(size=14,family="Roboto"),
legend.margin = margin(c(20, 10, -65, 50)),
legend.key.size = unit(1.5, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 24, family="Roboto", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks=element_blank(),
aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"),
strip.text.x = element_text(size=13,family="Roboto"))
good_def_plot
good_def <- reg_predict %>%
filter(xg_per<0.06) %>%
arrange(xt_per) %>%
ungroup() %>%
slice_head(n=50) %>%
slice_sample(n=1) %>%
mutate(att_pct = round(100*(xt_per/(xt_per + def_xt_per)), 0))
good_def_plot <-
area_input %>%
#xt_applied %>%
#  filter(original_event_id == bad_def %>% pull(original_event_id)) %>%
inner_join(good_def %>% select(original_event_id), by='original_event_id') %>%
mutate(`Player Type` = case_when(
actor==TRUE ~ "Attacker w/ Ball",
keeper==TRUE ~ "Keeper",
teammate==TRUE ~ "Attacker",
teammate==FALSE ~ "Defender"
))
voronoi <- deldir::deldir(good_def_plot$ff_location.x, good_def_plot$ff_location.y, rw=c(80,120,0,80))
good_def_plot <- good_def_plot %>%
ggplot() +
annotate("rect",xmin = 0, xmax = 120, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 60, ymin = 0, ymax = 80, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 18, xmax = 0, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 102, xmax = 120, ymin = 18, ymax = 62, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = 6, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 114, ymin = 30, ymax = 50, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 120, xmax = 120.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("rect",xmin = 0, xmax = -0.5, ymin =36, ymax = 44, fill = NA, colour = "black", size = 0.6) +
annotate("segment", x = 60, xend = 60, y = -0.5, yend = 80.5, colour = "black", size = 0.6)+
annotate("segment", x = 0, xend = 0, y = 0, yend = 80, colour = "black", size = 0.6)+
annotate("segment", x = 120, xend = 120, y = 0, yend = 80, colour = "black", size = 0.6)+
theme(rect = element_blank(),
line = element_blank()) +
annotate("point", x = 108 , y = 40, colour = "black", size = 1.05) +
annotate("path", colour = "black", size = 0.6,
x=60+10*cos(seq(0,2*pi,length.out=2000)),
y=40+10*sin(seq(0,2*pi,length.out=2000)))+
annotate("point", x = 60 , y = 40, colour = "black", size = 1.05) +
annotate("path", x=12+10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40+10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
annotate("path", x=107.84-10*cos(seq(-0.3*pi,0.3*pi,length.out=30)), size = 0.6,
y=40-10*sin(seq(-0.3*pi,0.3*pi,length.out=30)), col="black") +
geom_point(aes(x = ff_location.x, y = ff_location.y, fill=`Player Type`),
size = 6, alpha = 0.8, shape=21) +
labs(title = "Good Defending", subtitle = "Based on Expected Threat Controlled by Defenders and Pre-Shot Attacker w/Ball xG", caption = "Note:\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data)\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).\n- Attacker w/ Ball expected goals is calculated as the hypothetical pre-shot xG based off of the attacker w/ ball location, regardless of whether or not the player shot the ball.") +
annotate(geom="label",x=90, y=40, label=paste0("xT Controlled by Attackers = ", good_def %>% pull(att_pct),"%"),fontface='bold', size = 6, family="Roboto",
label.padding = unit(0.4, "lines")) +
geom_segment(
aes(x=x1, y=y1, xend=x2, yend=y2),
size=0.75, alpha=0.3,
data=voronoi$dirsgs,
linetype=2,
color= "black") +
coord_flip(xlim = c(85, 125)) +
theme(axis.text.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
plot.subtitle = element_text(size = 18, family="Roboto", hjust = 0.5),
axis.text.y=element_blank(),
legend.position = "top",
legend.title=element_blank(),
legend.text=element_text(size=14,family="Roboto"),
legend.margin = margin(c(20, 10, -65, 50)),
legend.key.size = unit(1.5, "cm"),
plot.title = element_text(margin = margin(r = 10, b = 10), face="bold",size = 24, family="Roboto", colour = "black", hjust = 0.5),
legend.direction = "horizontal",
axis.ticks=element_blank(),
aspect.ratio = c(65/100),
plot.background = element_rect(fill = "white"),
strip.text.x = element_text(size=13,family="Roboto"))
good_def_plot
base_size <- 8.5
asp <- 1.5
ggsave(
filename = 'good_def.png',
plot = good_def_plot,
height = base_size,
width = base_size * asp
)
plot_input <- def_area_event %>%
left_join(reg_predict %>% select(original_event_id, pred), by='original_event_id') %>%
group_by(game_id, attacking_team, defending_team, side, teammate) %>%
summarize(
xt = sum(xt),
events = n(),
xt_per = xt/events,
actor_xt = sum(actor_xt),
actor_xt_per = actor_xt/events,
xg = sum(xg, na.rm=T),
xg_per = xg/events,
pred = sum(pred, na.rm=T),
pred_per = pred/events
)
plot_input <- plot_input %>%
filter(side=="defending") %>%
left_join(plot_input %>% filter(side=="attacking") %>%
select(game_id, attacking_team, defending_team, att_xt_per= xt_per),
by=c("game_id", "attacking_team", "defending_team")) %>%
mutate(def_xt_share = 100*(xt_per/(att_xt_per + xt_per))) %>%
group_by(defending_team) %>%
summarize(
events = sum(events),
matches = n(),
events_per = events/matches,
def_xt_share = mean(def_xt_share),
pred_per = mean(pred_per),
pred_total = (events*pred_per)/matches
) %>%
mutate(
rel_xt_share = def_xt_share - mean(def_xt_share)
)
p <- plot_input %>%
ggplot(aes(x=reorder(defending_team, -rel_xt_share), y = rel_xt_share, fill = events_per)) +
geom_bar(stat="identity", color="black") +
scale_fill_gradient(low=("white"), high=("red"), name= "Opposition Final 1/3\nActions per Match") +
geom_text(data=subset(plot_input, rel_xt_share>0), aes(label=defending_team, x=reorder(defending_team, -rel_xt_share), y = rel_xt_share+0.1), hjust=0) +
geom_text(data=subset(plot_input, rel_xt_share<0), aes(label=defending_team, x=reorder(defending_team, -rel_xt_share), y = rel_xt_share-0.1), hjust=1) +
coord_flip(ylim=c(-6,4)) +
ggpubr::theme_pubr() +
theme(text=element_text(family="Roboto")) +
labs(title = "Euro 2020: Which defenses effectively controlled opposition expected threat?",
subtitle = "Expected Threat Controlled by Defenders per Opposition Open Play Actions in the Final 1/3",
caption = "Note:\n- Average Defensive Expected Threat Share is calculated by determining, for each opposition open play action in the final 1/3, the share of expected threat controlled by the defensive team relative \nto the attacking team.\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data)\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).",
y = "Average Defensive Expected Threat Share\n(Relative to Average)") +
theme(legend.position = "right",
axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
aspect.ratio = c(65/100))
base_size <- 8.5
asp <- 1.5
ggsave(
filename = 'bar.png',
plot = p,
height = base_size,
width = base_size * asp
)
scatter_input %>%
ggplot(aes(x=def_xt_per_share, y=shot_xg_per)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE, color="black") +
ggpubr::theme_pubr() +
theme(text=element_text(family="Roboto")) +
labs(title = "Euro 2020: Defensive control over expected threat correlated with a decrease in opposition xG per final 1/3 action",
subtitle = "Expected Threat Controlled by Defenders per Opposition Open Play Actions in the Final 1/3 by Match",
caption = "Note:\n- Average Defensive Expected Threat Share is calculated by determining, for each opposition open play action in the final 1/3, the share of expected threat controlled by the defensive team relative to the attacking team.\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data)\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).",
x = "Average Defensive Expected Threat Share by Match",
y = "Average Opposition Shot xG per Final 1/3 Action by Match") +
theme(legend.position = "right",
axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.y = element_blank(),
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
aspect.ratio = c(65/100))
scatter_input %>%
ggplot(aes(x=def_xt_per_share, y=shot_xg_per)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE, color="black") +
ggpubr::theme_pubr() +
theme(text=element_text(family="Roboto")) +
labs(title = "Euro 2020: Defensive control over expected threat correlated with a decrease in opposition xG per final 1/3 action",
subtitle = "Expected Threat Controlled by Defenders per Opposition Open Play Actions in the Final 1/3 by Match",
caption = "Note:\n- Average Defensive Expected Threat Share is calculated by determining, for each opposition open play action in the final 1/3, the share of expected threat controlled by the defensive team relative to the attacking team.\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data)\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).",
x = "Average Defensive Expected Threat Share by Match",
y = "Average Opposition Shot xG per Final 1/3 Action by Match") +
theme(legend.position = "right",
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
aspect.ratio = c(65/100))
scatter_input %>%
ggplot(aes(x=def_xt_per_share, y=shot_xg_per)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE, color="black") +
ggpubr::theme_pubr() +
theme(text=element_text(family="Roboto")) +
labs(title = "Euro 2020: Defensive control over expected threat correlated with a decrease in opposition shot xG per final 1/3 action",
subtitle = "Expected Threat Controlled by Defenders per Opposition Open Play Actions in the Final 1/3 by Match",
caption = "Note:\n- Average Defensive Expected Threat Share is calculated by determining, for each opposition open play action in the final 1/3, the share of expected threat controlled by the defensive team relative to the attacking team.\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data).\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).",
x = "AverageDefensive Expected Threat Share",
y = "Opposition Shot xG per Final 1/3 Action") +
theme(legend.position = "right",
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
aspect.ratio = c(65/100))
p <- scatter_input %>%
ggplot(aes(x=def_xt_per_share, y=shot_xg_per)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE, color="black") +
ggpubr::theme_pubr() +
theme(text=element_text(family="Roboto")) +
labs(title = "Euro 2020: Defensive control over expected threat correlated with a decrease in opposition shot xG per final 1/3 action",
subtitle = "Expected Threat Controlled by Defenders per Opposition Open Play Actions in the Final 1/3 by Match",
caption = "Note:\n- Average Defensive Expected Threat Share is calculated by determining, for each opposition open play action in the final 1/3, the share of expected threat controlled by the defensive team relative to the attacking team.\n- Opposition Shot xG per Final 1/3 Action is calculated as the opposition's total shot xG in a given match divided by the opposition team's total number of open play actions in the final 1/3.\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data).\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).",
x = "Average Defensive Expected Threat Share",
y = "Opposition Shot xG per Final 1/3 Action") +
theme(legend.position = "right",
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
aspect.ratio = c(65/100))
base_size <- 8.5
asp <- 1.5
ggsave(
filename = 'scatter.png',
plot = p,
height = base_size,
width = base_size * asp
)
p <- scatter_input %>%
ggplot(aes(x=def_xt_per_share, y=shot_xg_per)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE, color="black") +
ggpubr::theme_pubr() +
theme(text=element_text(family="Roboto")) +
labs(title = "Euro 2020: Defensive control over expected threat correlated with a decrease in opposition shot xG per final 1/3 action",
subtitle = "Expected Threat Controlled by Defenders per Opposition Open Play Actions in the Final 1/3 by Match",
caption = "Note:\n- Average Defensive Expected Threat Share is calculated by determining, for each opposition open play action in the final 1/3, the share of expected threat controlled by the\n defensive team relative to the attacking team.\n- Opposition Shot xG per Final 1/3 Action is calculated as the opposition's total shot xG in a given match divided by the opposition team's total number of open play actions in the\n final 1/3.\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data).\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).",
x = "Average Defensive Expected Threat Share",
y = "Opposition Shot xG per Final 1/3 Action") +
theme(legend.position = "right",
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
aspect.ratio = c(65/100))
base_size <- 8.5
asp <- 1.5
ggsave(
filename = 'scatter.png',
plot = p,
height = base_size,
width = base_size * asp
)
p <- scatter_input %>%
ggplot(aes(x=def_xt_per_share, y=shot_xg_per)) +
geom_point() +
geom_smooth(method = "lm", se=FALSE, color="black") +
ggpubr::theme_pubr() +
theme(text=element_text(family="Roboto")) +
labs(title = "Euro 2020: Defensive control over expected threat correlated with a decrease in opposition shot xG per final 1/3 action",
subtitle = "Expected Threat Controlled by Defenders per Opposition Open Play Actions in the Final 1/3 by Match",
caption = "Note:\n- Average Defensive Expected Threat Share is calculated by determining, for each opposition open play action in the final 1/3, the share of expected threat controlled by the\n defensive team relative to the attacking team.\n- Opposition Shot xG per Final 1/3 Action is calculated as the opposition's total shot xG in a given match divided by the opposition team's total number of open play actions in\n the final 1/3.\n- Data from StatsBomb (See: https://github.com/statsbomb/open-data).\n- Expected Threat (xT) calculated using StatsBomb Euro 2020 open data, using Karun Singh's methodology (See: https://karun.in/blog/expected-threat.html).",
x = "Average Defensive Expected Threat Share",
y = "Opposition Shot xG per Final 1/3 Action") +
theme(legend.position = "right",
plot.caption=element_text(size=10,family="Roboto", hjust=0, vjust=0.5),
aspect.ratio = c(65/100))
base_size <- 8.5
asp <- 1.5
ggsave(
filename = 'scatter.png',
plot = p,
height = base_size,
width = base_size * asp
)
